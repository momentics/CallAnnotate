name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
#  release:
#   types: [ published ]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
      - name: Checkout CallAnnotate repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'src/requirements.txt'

      - name: Install System dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1-dev ffmpeg sox

      - name: Установка зависимостей для сборки RNNoise
        run: |
          sudo apt-get install -y autoconf libtool build-essential git

      - name: Build and install RNNoise native library
        run: |
          # Клонируем репозиторий RNNoise
          #git clone https://gitlab.xiph.org/xiph/rnnoise.git /tmp/rnnoise
          git clone https://github.com/xiph/rnnoise.git /tmp/rnnoise

          cd /tmp/rnnoise
          # Включаем все SIMD-расширения для текущей платформы
          export CFLAGS="-march=native -O3"
          ./autogen.sh
          ./configure
          make
          sudo make install
          sudo ldconfig
          # Проверка установки библиотеки
          ls -la /usr/local/lib/librnnoise*
          ldconfig -p | grep rnnoise          

      # Добавлена предустановка Rust для сборки deepfilternet
      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustc --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install pytest-aioresponses pytest-httpx

      - name: Run tests
        run: pytest tests/

      - name: Upload OpenAPI spec artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: openapi.json
        
      - name: Check NOTICE file completeness
        run: |
          python scripts/check_notice_completeness.py

#  build-docker:
#    name: Build Docker on Release
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    if: github.event_name == 'release' && github.event.action == 'published'
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build Docker image
#        run: |
#          docker build \
#            --file docker/Dockerfile \
#            --tag capilot/callannotate:latest \
#            .
