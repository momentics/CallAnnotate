# config/default.yaml
# Основные настройки сервиса CallAnnotate.
# Данный файл загружается при старте приложения (может быть переопределён через CONFIG_PATH).
# Внимание: комментарии детально поясняют каждую секцию и параметры.

# -----------------------------
# Секция сервера и API
# -----------------------------
server:
  host: "0.0.0.0"        # Хост сервиса (0.0.0.0 — слушать на всех интерфейсах)
  port: 8000             # Порт HTTP
  workers: 1             # Количество воркеров Uvicorn
  reload: false          # Автоперезагрузка (для dev)
  log_level: "info"      # Уровень логирования Uvicorn
  version: "1.0.0"       # Версия сервиса

api:
  base_path: "/api/v1"   # Базовый префикс REST API

# -----------------------------
# Очередь, файловая система, CORS, логирование
# -----------------------------
queue:
  volume_path: "./volume"     # Корень тома (монтируется в контейнер)
  max_concurrent_tasks: 2     # Макс. параллельных задач обработки
  max_queue_size: 100         # Максимальный размер очереди
  task_timeout: 3600          # Таймаут одной задачи (сек)
  cleanup_interval: 300       # Интервал очистки очереди/истории (сек)

files:
  max_size: 524288000         # Макс. размер загружаемого файла (байт), 500MB
  allowed_formats:            # Допустимые контейнеры/форматы
    - "wav"
    - "mp3"
    - "ogg"
    - "flac"
    - "aac"
    - "m4a"
    - "mp4"
  temp_cleanup_hours: 24      # Хранить временные файлы не дольше N часов

cors:
  origins: ["*"]
  allow_credentials: true
  allow_methods: ["*"]
  allow_headers: ["*"]

logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: null                  # Если null — лог будет создан в <volume>/logs/callannotate.log
  rotation:                   # Параметры ротации логов (TimedRotatingFileHandler)
    enabled: true
    when: "midnight"
    interval: 1
    backup_count: 7
  external_levels:
    uvicorn: "INFO"
    fastapi: "INFO"
    asyncio: "WARNING"

# Единый кэш моделей (может быть переопределён)
models:
  cache_dir: "./volume/models"

# -----------------------------
# Этап предобработки аудио (preprocess)
# Обрабатывает файл перед диаризацией/ASR:
#   - опционально статическое шумоподавление SoX (если доступен sox)
#   - RNNoise (10ms фреймы при 48kHz, при отсутствии lib — мягкий fallback)
#   - DeepFilterNet2/3 (если установлен пакет df.* — «мягкое» выключение при отсутствии)
#   - разбивка на чанки и склейка (linear/windowed)
#   - RMS-ceiling: понижает уровень громкости до target_rms_db (не поднимает слабые сигналы)
# Примечание: все фильтры безопасно отключаются при недоступности внешних бинарей/библиотек.
# -----------------------------
preprocess:
  model: "DeepFilterNet2"     # Текстовый идентификатор (для логов/UI)
  device: "cpu"               # Целевое устройство для DFN (если доступно): cpu/cuda

  # Разметка чанков
  chunk_duration: 30.0        # Длительность чанка в секундах
  overlap: 0.2                # Перекрытие чанков в секундах
  chunk_overlap_method: "windowed"  # Склейка: "linear" либо "windowed"

  # Целевые параметры потока
  channels: "mono"            # "mono" | "stereo" | "original"
  sample_rate_target: 16000   # Целевая частота дискретизации (Гц); null — оставить исходную

  # RMS-ceiling
  target_rms: -20.0           # Целевой уровень RMS (дБFS); если текущий RMS выше — понижается

  # SoX (опционально, если установлен sox)
  sox_enabled: false                  # Включить статическое шумоподавление SoX
  sox_noise_profile_duration: 2.0     # Секунды для профиля шума (начало записи)
  sox_noise_reduction: 0.3            # Коэффициент подавления шума (0.0–1.0)
  sox_gain_normalization: true        # Применить sox gain -n (нормализация пиков; RMS регулируется позже)

  # RNNoise (нейрошумодав, 48kHz, мягкий fallback)
  rnnoise_enabled: true               # Включить RNNoise
  rnnoise_sample_rate: 48000          # Внутренняя частота RNNoise (не менять)

  # DeepFilterNet (DFN2/3) — «мягко» отключается, если пакет не установлен
  deepfilter_enabled: true            # Применять DFN
  deepfilter_sample_rate: 48000       # Рабочая частота DFN-процесса (Гц)

  # Выходной файл
  output_suffix: "_processed" # Суффикс для результирующего файла
  audio_format: "wav"         # Формат итогового файла (wav/flac/ogg/mp3)
  bit_depth: 16               # Битовость PCM при сохранении wav (16/24/32)

  # Ресурсы/служебное
  processing_threads: 1       # Зарезервировано — в текущей реализации не распараллеливает
  memory_limit_mb: 1024       # Мягкое ограничение, используется для будущих оптимизаций
  temp_cleanup: true          # Очищать временные артефакты
  preserve_original: true     # Сохранять оригинальный файл
  save_intermediate: false    # Сохранять промежуточные результаты (для отладки)
  progress_interval: 10       # Шаг прогресса (в процентах), при отчёте из preprocess

# -----------------------------
# Секция диаризации
# -----------------------------
diarization:
  model: "pyannote/speaker-diarization-3.1"
  use_auth_token: null
  device: "cpu"
  batch_size: 8
  window_enabled: false
  window_size: 900.0
  hop_size: 225.0
  min_speakers: 2
  max_speakers: 2

# -----------------------------
# Этап транскрипции (Whisper)
# -----------------------------
transcription:
  model: "openai/whisper-small"
  device: "cpu"
  language: "ru"
  batch_size: 16
  task: "transcribe"
  metrics:
    confidence: true
    avg_logprob: true
    no_speech_prob: true
    timing: true
  # Параметры привязки ASR-сегментов к диаризации
  min_segment_duration: 0.2 # Минимальная длительность речевого сегмента (в секундах), которая допускается после выравнивания и постобработки. Сегменты короче 0.2с считаются «микро»-фрагментами и отбрасываются, чтобы убрать артефакты распознавания/диаризации и не плодить слишком мелкие реплики.
  max_silence_between: 0.1 # Максимально допустимая пауза (в секундах) между соседними сегментами одного и того же спикера, при которой они будут слиты в единый сегмент. Если тишина между двумя репликами спикера ≤0.2с, постпроцессинг объединит их: обновит границы времени, склейку текста и список слов.
  min_overlap: 0.1 # Минимальная доля перекрытия (в диапазоне 0.0–1.0) между интервалом слова/ASR-сегмента и диар-сегментом, необходимая для назначения спикера по перекрытию. Значение 0.0 означает максимально «разрешительный» режим: спикер будет назначен даже при очень малом пересечении, а при полном отсутствии перекрытия логика обычно упадёт на fallback (например, «unknown» или доминирующий спикер сегмента). На практике повышение порога (например, 0.3) уменьшает ошибочные назначения при слабом пересечении, но может оставить часть слов без спикера.


# -----------------------------
# Этап распознавания голосов (SpeechBrain + FAISS)
# -----------------------------
recognition:
  model: "speechbrain/spkrec-ecapa-voxceleb"
  device: "cpu"
  threshold: 0.7
  embeddings_path: "./volume/models/embeddings"
  index_path: null

# -----------------------------
# CardDAV
# -----------------------------
carddav:
  enabled: true
  url: null
  username: null
  password: null
  timeout: 30
  verify_ssl: true

# -----------------------------
# Прочее
# -----------------------------
voices: []

notifications:
  webhooks:
    enabled: true
    timeout: 30
    retry_count: 3
    retry_delay: 5
  websocket:
    ping_interval: 30
    ping_timeout: 10
    close_timeout: 10

security:
  api_key_required: false
  rate_limiting:
    enabled: true
    requests_per_minute: 60
  file_upload:
    virus_scan: false
    content_validation: true

monitoring:
  metrics_enabled: true
  health_check_interval: 60
  performance_logging: true

features:
  real_time_processing: true
  batch_processing: true
  webhook_callbacks: true
  file_download: true
  task_cancellation: true
  progress_tracking: true
